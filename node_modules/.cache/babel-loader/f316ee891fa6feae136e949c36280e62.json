{"ast":null,"code":"import _slicedToArray from\"/home/vostro/Desktop/ReactMeals/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _toConsumableArray from\"/home/vostro/Desktop/ReactMeals/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/home/vostro/Desktop/ReactMeals/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{useReducer}from'react';import CartContext from'./cart-context';import{jsx as _jsx}from\"react/jsx-runtime\";var defaultCartState={items:[],totalAmount:0};var cartReducer=function cartReducer(state,action){if(action.type==='ADD'){var updatedTotalAmount=state.totalAmount+action.item.price*action.item.amount;var existingCartItemIndex=state.items.findIndex(function(item){return item.id===action.item.id;});var existingCartItem=state.items[existingCartItemIndex];var updatedItems;// Check to see if meal type has already been ordered. If so add to amount for type of meal\nif(existingCartItem){var updatedItem=_objectSpread(_objectSpread({},existingCartItem),{},{amount:existingCartItem.amount+action.item.amount});updatedItems=_toConsumableArray(state.items);updatedItems[existingCartItemIndex]=updatedItem;}else{// If this is the first time item of meal type is being ordered add meal type to list\nupdatedItems=state.items.concat(action.item);}return{items:updatedItems,totalAmount:updatedTotalAmount};}if(action.type==='REMOVE'){// Find the type of meal in the array\nvar _existingCartItemIndex=state.items.findIndex(function(item){return item.id===action.id;});var existingItem=state.items[_existingCartItemIndex];var _updatedTotalAmount=state.totalAmount-existingItem.price;var _updatedItems;// If only one item of the meal type is in the cart remove the meal type from list\nif(existingItem.amount===1){_updatedItems=state.items.filter(function(item){return item.id!==action.id;});}// If there is more than one item of the meal type, remove the item but keep meal type\nelse{var _updatedItem=_objectSpread(_objectSpread({},existingItem),{},{amount:existingItem.amount-1});_updatedItems=_toConsumableArray(state.items);_updatedItems[_existingCartItemIndex]=_updatedItem;}return{items:_updatedItems,totalAmount:_updatedTotalAmount};}return defaultCartState;};var CartProvider=function CartProvider(props){var _useReducer=useReducer(cartReducer,defaultCartState),_useReducer2=_slicedToArray(_useReducer,2),cartState=_useReducer2[0],dispatchCartAction=_useReducer2[1];var addItemToCartHandler=function addItemToCartHandler(item){dispatchCartAction({type:'ADD',item:item});};var removeItemFromCartHandler=function removeItemFromCartHandler(id){dispatchCartAction({type:\"REMOVE\",id:id});};var cartContext={items:cartState.items,totalAmount:cartState.totalAmount,addItem:addItemToCartHandler,removeItem:removeItemFromCartHandler};return/*#__PURE__*/_jsx(CartContext.Provider,{value:cartContext,children:props.children});};export default CartProvider;","map":{"version":3,"sources":["/home/vostro/Desktop/ReactMeals/src/store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","existingItem","filter","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":"ycAAA,OAAQA,UAAR,KAAyB,OAAzB,CACA,MAAOC,CAAAA,WAAP,KAAwB,gBAAxB,C,2CAEA,GAAMC,CAAAA,gBAAgB,CAAG,CACrBC,KAAK,CAAE,EADc,CAErBC,WAAW,CAAE,CAFQ,CAAzB,CAKA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAQC,MAAR,CAAmB,CACnC,GAAGA,MAAM,CAACC,IAAP,GAAgB,KAAnB,CAAyB,CACrB,GAAMC,CAAAA,kBAAkB,CAAGH,KAAK,CAACF,WAAN,CAAoBG,MAAM,CAACG,IAAP,CAAYC,KAAZ,CAAoBJ,MAAM,CAACG,IAAP,CAAYE,MAA/E,CAEA,GAAMC,CAAAA,qBAAqB,CAAGP,KAAK,CAACH,KAAN,CAAYW,SAAZ,CAAsB,SAAAJ,IAAI,QAAIA,CAAAA,IAAI,CAACK,EAAL,GAAYR,MAAM,CAACG,IAAP,CAAYK,EAA5B,EAA1B,CAA9B,CAEA,GAAMC,CAAAA,gBAAgB,CAAIV,KAAK,CAACH,KAAN,CAAYU,qBAAZ,CAA1B,CAEA,GAAII,CAAAA,YAAJ,CACA;AACA,GAAID,gBAAJ,CAAqB,CAEhB,GAAME,CAAAA,WAAW,gCACXF,gBADW,MAEdJ,MAAM,CAAEI,gBAAgB,CAACJ,MAAjB,CAA0BL,MAAM,CAACG,IAAP,CAAYE,MAFhC,EAAjB,CAIDK,YAAY,oBAAOX,KAAK,CAACH,KAAb,CAAZ,CACAc,YAAY,CAACJ,qBAAD,CAAZ,CAAsCK,WAAtC,CACH,CARD,IAQO,CACP;AACKD,YAAY,CAAGX,KAAK,CAACH,KAAN,CAAYgB,MAAZ,CAAmBZ,MAAM,CAACG,IAA1B,CAAf,CACJ,CAED,MAAO,CACHP,KAAK,CAAEc,YADJ,CAEHb,WAAW,CAAEK,kBAFV,CAAP,CAIH,CAED,GAAGF,MAAM,CAACC,IAAP,GAAgB,QAAnB,CAA6B,CAEzB;AACA,GAAMK,CAAAA,sBAAqB,CAAGP,KAAK,CAACH,KAAN,CAAYW,SAAZ,CAAsB,SAAAJ,IAAI,QAAIA,CAAAA,IAAI,CAACK,EAAL,GAAYR,MAAM,CAACQ,EAAvB,EAA1B,CAA9B,CACA,GAAMK,CAAAA,YAAY,CAAGd,KAAK,CAACH,KAAN,CAAYU,sBAAZ,CAArB,CACA,GAAMJ,CAAAA,mBAAkB,CAAGH,KAAK,CAACF,WAAN,CAAoBgB,YAAY,CAACT,KAA5D,CACA,GAAIM,CAAAA,aAAJ,CACA;AACA,GAAIG,YAAY,CAACR,MAAb,GAAwB,CAA5B,CAA+B,CAC3BK,aAAY,CAAGX,KAAK,CAACH,KAAN,CAAYkB,MAAZ,CAAmB,SAAAX,IAAI,QAAIA,CAAAA,IAAI,CAACK,EAAL,GAAYR,MAAM,CAACQ,EAAvB,EAAvB,CAAf,CACH,CACD;AAHA,IAIK,CACD,GAAMG,CAAAA,YAAW,gCAAQE,YAAR,MAAsBR,MAAM,CAAEQ,YAAY,CAACR,MAAb,CAAsB,CAApD,EAAjB,CACAK,aAAY,oBAAOX,KAAK,CAACH,KAAb,CAAZ,CACAc,aAAY,CAACJ,sBAAD,CAAZ,CAAsCK,YAAtC,CACH,CAED,MAAO,CACHf,KAAK,CAAEc,aADJ,CAEHb,WAAW,CAAEK,mBAFV,CAAP,CAMH,CAED,MAAOP,CAAAA,gBAAP,CACH,CAxDD,CA0DA,GAAMoB,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAAC,KAAK,CAAI,CAE1B,gBAAwCvB,UAAU,CAACK,WAAD,CAAcH,gBAAd,CAAlD,4CAAOsB,SAAP,iBAAkBC,kBAAlB,iBAEA,GAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAAAhB,IAAI,CAAI,CACjCe,kBAAkB,CAAC,CAACjB,IAAI,CAAE,KAAP,CAAcE,IAAI,CAAEA,IAApB,CAAD,CAAlB,CACH,CAFD,CAIA,GAAMiB,CAAAA,yBAAyB,CAAG,QAA5BA,CAAAA,yBAA4B,CAAAZ,EAAE,CAAI,CACpCU,kBAAkB,CAAC,CAACjB,IAAI,CAAE,QAAP,CAAiBO,EAAE,CAACA,EAApB,CAAD,CAAlB,CACH,CAFD,CAIA,GAAMa,CAAAA,WAAW,CAAG,CAChBzB,KAAK,CAAEqB,SAAS,CAACrB,KADD,CAEhBC,WAAW,CAAEoB,SAAS,CAACpB,WAFP,CAGhByB,OAAO,CAAEH,oBAHO,CAIhBI,UAAU,CAAEH,yBAJI,CAApB,CAOA,mBAAO,KAAC,WAAD,CAAa,QAAb,EAAsB,KAAK,CAAEC,WAA7B,UACFL,KAAK,CAACQ,QADJ,EAAP,CAGH,CAtBD,CAwBA,cAAeT,CAAAA,YAAf","sourcesContent":["import {useReducer} from 'react'\nimport CartContext from './cart-context'\n\nconst defaultCartState = {\n    items: [],\n    totalAmount: 0\n}\n\nconst cartReducer = (state, action) => {\n    if(action.type === 'ADD'){\n        const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount\n\n        const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id) \n\n        const existingCartItem =  state.items[existingCartItemIndex]\n        \n        let updatedItems\n        // Check to see if meal type has already been ordered. If so add to amount for type of meal\n        if (existingCartItem){\n            \n             const updatedItem = {\n                ...existingCartItem,\n                amount: existingCartItem.amount + action.item.amount\n            }\n            updatedItems = [...state.items]\n            updatedItems[existingCartItemIndex] = updatedItem\n        } else {\n        // If this is the first time item of meal type is being ordered add meal type to list\n             updatedItems = state.items.concat(action.item)\n        }\n\n        return {\n            items: updatedItems,\n            totalAmount: updatedTotalAmount\n        }\n    }\n\n    if(action.type === 'REMOVE') {\n        \n        // Find the type of meal in the array\n        const existingCartItemIndex = state.items.findIndex(item => item.id === action.id)\n        const existingItem = state.items[existingCartItemIndex]\n        const updatedTotalAmount = state.totalAmount - existingItem.price\n        let updatedItems\n        // If only one item of the meal type is in the cart remove the meal type from list\n        if (existingItem.amount === 1) {\n            updatedItems = state.items.filter(item => item.id !== action.id)\n        }\n        // If there is more than one item of the meal type, remove the item but keep meal type\n        else {\n            const updatedItem = { ...existingItem, amount: existingItem.amount - 1}\n            updatedItems = [...state.items]\n            updatedItems[existingCartItemIndex] = updatedItem\n        }\n\n        return {\n            items: updatedItems,\n            totalAmount: updatedTotalAmount\n        }\n\n\n    }\n\n    return defaultCartState \n}\n\nconst CartProvider = props => {\n\n    const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState)\n\n    const addItemToCartHandler = item => {\n        dispatchCartAction({type: 'ADD', item: item})\n    }\n\n    const removeItemFromCartHandler = id => {\n        dispatchCartAction({type: \"REMOVE\", id:id})\n    }\n\n    const cartContext = {\n        items: cartState.items,\n        totalAmount: cartState.totalAmount,\n        addItem: addItemToCartHandler,\n        removeItem: removeItemFromCartHandler\n    }\n\n    return <CartContext.Provider value={cartContext}>\n        {props.children}\n    </CartContext.Provider>\n}\n\nexport default CartProvider"]},"metadata":{},"sourceType":"module"}