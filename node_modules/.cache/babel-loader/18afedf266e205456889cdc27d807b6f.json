{"ast":null,"code":"var _jsxFileName = \"/home/vostro/Desktop/ReactMeals/src/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nimport CartContext from './cart-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItems; // Check to see if meal type has already been ordered. If so add to amount for type of meal\n\n    if (existingCartItem) {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      // If this is the first time item of meal type is being ordered add meal type to list\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === 'REMOVE') {\n    // Find the type of meal in the array\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.id);\n    const existingItem = state.items[existingCartItemIndex];\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\n    let updatedItems; // If only one item of the meal type is in the cart remove the meal type from list\n\n    if (existingItem.amount === 1) {\n      updatedItems = state.items.filter(item => item.id !== action.id);\n    } // If there is more than one item of the meal type, remove the item but keep meal type\n    else {\n        const updatedItem = { ...existingItem,\n          amount: existingItem.amount - 1\n        };\n        updatedItems = [...state.items];\n        updatedItems[existingCartItemIndex] = updatedItem;\n      }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 12\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/vostro/Desktop/ReactMeals/src/store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","existingItem","filter","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,SAAQA,UAAR,QAAyB,OAAzB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,KAAK,EAAE,EADc;AAErBC,EAAAA,WAAW,EAAE;AAFQ,CAAzB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,MAAGA,MAAM,CAACC,IAAP,KAAgB,KAAnB,EAAyB;AACrB,UAAMC,kBAAkB,GAAGH,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACG,IAAP,CAAYC,KAAZ,GAAoBJ,MAAM,CAACG,IAAP,CAAYE,MAA/E;AAEA,UAAMC,qBAAqB,GAAGP,KAAK,CAACH,KAAN,CAAYW,SAAZ,CAAsBJ,IAAI,IAAIA,IAAI,CAACK,EAAL,KAAYR,MAAM,CAACG,IAAP,CAAYK,EAAtD,CAA9B;AAEA,UAAMC,gBAAgB,GAAIV,KAAK,CAACH,KAAN,CAAYU,qBAAZ,CAA1B;AAEA,QAAII,YAAJ,CAPqB,CAQrB;;AACA,QAAID,gBAAJ,EAAqB;AAEhB,YAAME,WAAW,GAAG,EACjB,GAAGF,gBADc;AAEjBJ,QAAAA,MAAM,EAAEI,gBAAgB,CAACJ,MAAjB,GAA0BL,MAAM,CAACG,IAAP,CAAYE;AAF7B,OAApB;AAIDK,MAAAA,YAAY,GAAG,CAAC,GAAGX,KAAK,CAACH,KAAV,CAAf;AACAc,MAAAA,YAAY,CAACJ,qBAAD,CAAZ,GAAsCK,WAAtC;AACH,KARD,MAQO;AACP;AACKD,MAAAA,YAAY,GAAGX,KAAK,CAACH,KAAN,CAAYgB,MAAZ,CAAmBZ,MAAM,CAACG,IAA1B,CAAf;AACJ;;AAED,WAAO;AACHP,MAAAA,KAAK,EAAEc,YADJ;AAEHb,MAAAA,WAAW,EAAEK;AAFV,KAAP;AAIH;;AAED,MAAGF,MAAM,CAACC,IAAP,KAAgB,QAAnB,EAA6B;AAEzB;AACA,UAAMK,qBAAqB,GAAGP,KAAK,CAACH,KAAN,CAAYW,SAAZ,CAAsBJ,IAAI,IAAIA,IAAI,CAACK,EAAL,KAAYR,MAAM,CAACQ,EAAjD,CAA9B;AACA,UAAMK,YAAY,GAAGd,KAAK,CAACH,KAAN,CAAYU,qBAAZ,CAArB;AACA,UAAMJ,kBAAkB,GAAGH,KAAK,CAACF,WAAN,GAAoBgB,YAAY,CAACT,KAA5D;AACA,QAAIM,YAAJ,CANyB,CAOzB;;AACA,QAAIG,YAAY,CAACR,MAAb,KAAwB,CAA5B,EAA+B;AAC3BK,MAAAA,YAAY,GAAGX,KAAK,CAACH,KAAN,CAAYkB,MAAZ,CAAmBX,IAAI,IAAIA,IAAI,CAACK,EAAL,KAAYR,MAAM,CAACQ,EAA9C,CAAf;AACH,KAFD,CAGA;AAHA,SAIK;AACD,cAAMG,WAAW,GAAG,EAAE,GAAGE,YAAL;AAAmBR,UAAAA,MAAM,EAAEQ,YAAY,CAACR,MAAb,GAAsB;AAAjD,SAApB;AACAK,QAAAA,YAAY,GAAG,CAAC,GAAGX,KAAK,CAACH,KAAV,CAAf;AACAc,QAAAA,YAAY,CAACJ,qBAAD,CAAZ,GAAsCK,WAAtC;AACH;;AAED,WAAO;AACHf,MAAAA,KAAK,EAAEc,YADJ;AAEHb,MAAAA,WAAW,EAAEK;AAFV,KAAP;AAMH;;AAED,SAAOP,gBAAP;AACH,CAxDD;;AA0DA,MAAMoB,YAAY,GAAGC,KAAK,IAAI;AAAA;;AAE1B,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCzB,UAAU,CAACK,WAAD,EAAcH,gBAAd,CAAlD;;AAEA,QAAMwB,oBAAoB,GAAGhB,IAAI,IAAI;AACjCe,IAAAA,kBAAkB,CAAC;AAACjB,MAAAA,IAAI,EAAE,KAAP;AAAcE,MAAAA,IAAI,EAAEA;AAApB,KAAD,CAAlB;AACH,GAFD;;AAIA,QAAMiB,yBAAyB,GAAGZ,EAAE,IAAI;AACpCU,IAAAA,kBAAkB,CAAC;AAACjB,MAAAA,IAAI,EAAE,QAAP;AAAiBO,MAAAA,EAAE,EAACA;AAApB,KAAD,CAAlB;AACH,GAFD;;AAIA,QAAMa,WAAW,GAAG;AAChBzB,IAAAA,KAAK,EAAEqB,SAAS,CAACrB,KADD;AAEhBC,IAAAA,WAAW,EAAEoB,SAAS,CAACpB,WAFP;AAGhByB,IAAAA,OAAO,EAAEH,oBAHO;AAIhBI,IAAAA,UAAU,EAAEH;AAJI,GAApB;AAOA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cACFL,KAAK,CAACQ;AADJ;AAAA;AAAA;AAAA;AAAA,UAAP;AAGH,CAtBD;;GAAMT,Y;;KAAAA,Y;AAwBN,eAAeA,YAAf","sourcesContent":["import {useReducer} from 'react'\nimport CartContext from './cart-context'\n\nconst defaultCartState = {\n    items: [],\n    totalAmount: 0\n}\n\nconst cartReducer = (state, action) => {\n    if(action.type === 'ADD'){\n        const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount\n\n        const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id) \n\n        const existingCartItem =  state.items[existingCartItemIndex]\n        \n        let updatedItems\n        // Check to see if meal type has already been ordered. If so add to amount for type of meal\n        if (existingCartItem){\n            \n             const updatedItem = {\n                ...existingCartItem,\n                amount: existingCartItem.amount + action.item.amount\n            }\n            updatedItems = [...state.items]\n            updatedItems[existingCartItemIndex] = updatedItem\n        } else {\n        // If this is the first time item of meal type is being ordered add meal type to list\n             updatedItems = state.items.concat(action.item)\n        }\n\n        return {\n            items: updatedItems,\n            totalAmount: updatedTotalAmount\n        }\n    }\n\n    if(action.type === 'REMOVE') {\n        \n        // Find the type of meal in the array\n        const existingCartItemIndex = state.items.findIndex(item => item.id === action.id)\n        const existingItem = state.items[existingCartItemIndex]\n        const updatedTotalAmount = state.totalAmount - existingItem.price\n        let updatedItems\n        // If only one item of the meal type is in the cart remove the meal type from list\n        if (existingItem.amount === 1) {\n            updatedItems = state.items.filter(item => item.id !== action.id)\n        }\n        // If there is more than one item of the meal type, remove the item but keep meal type\n        else {\n            const updatedItem = { ...existingItem, amount: existingItem.amount - 1}\n            updatedItems = [...state.items]\n            updatedItems[existingCartItemIndex] = updatedItem\n        }\n\n        return {\n            items: updatedItems,\n            totalAmount: updatedTotalAmount\n        }\n\n\n    }\n\n    return defaultCartState \n}\n\nconst CartProvider = props => {\n\n    const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState)\n\n    const addItemToCartHandler = item => {\n        dispatchCartAction({type: 'ADD', item: item})\n    }\n\n    const removeItemFromCartHandler = id => {\n        dispatchCartAction({type: \"REMOVE\", id:id})\n    }\n\n    const cartContext = {\n        items: cartState.items,\n        totalAmount: cartState.totalAmount,\n        addItem: addItemToCartHandler,\n        removeItem: removeItemFromCartHandler\n    }\n\n    return <CartContext.Provider value={cartContext}>\n        {props.children}\n    </CartContext.Provider>\n}\n\nexport default CartProvider"]},"metadata":{},"sourceType":"module"}